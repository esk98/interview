/* https://medium.com/webbdev/js-2b0820b3788f */
/* Палиндром
Первый шаг — преобразование символов входной строки в нижний регистр. 
Это гарантия того, что программа будет сравнивать именно сами символы, 
а не регистр или еще что-то.
Второй шаг — реверс строки. 
Это сделать несложно: необходимо преобразовать ее в массив посредством метода .split() (библиотека String). 
Потом мы переворачиваем массив, используя .reverse() (библиотека Array).
Последний этап — преобразование обратного массива в строку при помощи .join() (библиотека Array).
Теперь все, что нужно, — сравнить «обратную» строку с исходной, вернув результат true или false.
*/
function palindrome(str) {
  str = str.toLowerCase()
  return str === str.split('').reverse('').join('')
}

console.log(palindrome('asddsa'))
/* 
Функция выполняет нужные проверки с использованием условных операторов и 
выдает результат, необходимый пользователю.
В задаче стоит уделить внимание порядку операторов if…else: начинать с двойного условия (&&) и заканчивать случаем,
когда кратные числа найти не получилось.
В результате мы охватываем все варианты. */
function fizzbuzz(num) {
  for (let i = 1; i <= num; i++) {
    if (i % 3 === 0 && i % 5 === 0) {
      console.log('fizzbuzz')
    }
    else if (i % 3 === 0) {
      console.log('fizz')
    }
    else if (i % 5 === 0) {
      console.log('buzz')
    }
    else {
      console.log(i)
    }
  }
}

console.log(fizzbuzz(29))
/*
Поиск гласных
Важно обратить внимание на использование метода .includes(). 
Он доступен и для строк, и для массивов. 
Его стоит применять для того, чтобы выявить, содержит ли массив определенное значение. 
Этот метод возвращает true, если массив содержит указанное значение, и false, если нет.
*/
  const findVowels = str => {
    let count = 0
    const vowels = ['a', 'e', 'i', 'o', 'u']
    for(let char of str.toLowerCase()) {
      if(vowels.includes(char)) {
        count++
      }
    }
    return count
  } 
  console.log(findVowels('eeeeeee'))
/* 
Фибоначчи 
В массиве результатов первые два числа содержатся в ряду, 
поскольку каждая запись в последовательности состоит из суммы двух предыдущих чисел.
В самом начале двух чисел, которые можно взять для получения следующего числа нет, 
поэтому цикл не может сгенерировать их в автоматическом режиме. 
Но, как мы знаем, первые два числа — всегда 0 и 1. 
Поэтому инициализировать массив результатов можно вручную. */
function fibonacci(num) { // без рекурсии 
  const result = [0,1]
  for(let i = 2; i <= num; i++) {
    let prevNum1 = result[i-1]
    let prevNum2 = result[i-2]
    result.push(prevNum1 + prevNum2)
  }
  return result[num]
}
console.log(fibonacci(3))
